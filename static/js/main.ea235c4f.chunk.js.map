{"version":3,"sources":["components/Select.js","App.js","serviceWorker.js","index.js"],"names":["Select","props","input","obj","onChange","e","key","target","value","console","log","multipleOptions","className","type","list","multiple","id","App","useState","setMultipleOptions","onClick","to","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kQA6CeA,G,YA1CA,SAAAC,GAEX,IAOIC,EAPAC,EAAM,GAEJC,EAAW,SAAAC,GACbF,EAAIG,IAAMD,EAAEE,OAAOC,MACnBC,QAAQC,IAAIP,IAahB,OAPID,EADAD,EAAMU,gBACE,2BAAOC,UAAU,WAAWC,KAAK,QAAQC,KAAK,YAAYV,SAAUA,EAAUW,UAAQ,IAItF,2BAAOH,UAAU,WAAWC,KAAK,OAAOC,KAAK,YAAYV,SAAUA,IAI3E,yBAAKQ,UAAU,OACVV,EACD,8BAAUU,UAAU,WAAWI,GAAG,aAC9B,yBAAKJ,UAAU,mBACX,4BAAQA,UAAU,uBAAuBJ,MAAM,SAC/C,4BAAQI,UAAU,uBAAuBJ,MAAM,QAC/C,4BAAQI,UAAU,uBAAuBJ,MAAM,eAC/C,4BAAQI,UAAU,uBAAuBJ,MAAM,SAC/C,4BAAQI,UAAU,uBAAuBJ,MAAM,SAC/C,4BAAQI,UAAU,uBAAuBJ,MAAM,QAC/C,4BAAQI,UAAU,uBAAuBJ,MAAM,OAC/C,4BAAQI,UAAU,uBAAuBJ,MAAM,WAC/C,4BAAQI,UAAU,uBAAuBJ,MAAM,WAC/C,4BAAQI,UAAU,uBAAuBJ,MAAM,MAC/C,4BAAQI,UAAU,uBAAuBJ,MAAM,OAC/C,4BAAQI,UAAU,uBAAuBJ,MAAM,a,cCUpDS,EAtCH,WAAO,IAAD,EAE8BC,oBAAS,GAFvC,mBAETP,EAFS,KAEQQ,EAFR,KAYhB,OACE,kBAAC,IAAD,KACE,6BACE,6BACE,4BACE,4BACE,kBAAC,IAAD,CAAMC,QAdI,WACpBD,GAAmB,IAaqBP,UAAU,OAAOS,GAAG,QAAlD,sBAEF,4BACE,kBAAC,IAAD,CAAMD,QAbQ,WACxBD,GAAmB,IAYyBP,UAAU,OAAOS,GAAG,aAAtD,8BAIN,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,QACV,kBAAC,EAAD,CAAQX,gBAAiBA,KAE3B,kBAAC,IAAD,CAAOW,KAAK,aACV,kBAAC,EAAD,CAAQX,gBAAiBA,SC5BjBY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ea235c4f.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Select.css'\r\n\r\nconst Select = props => {\r\n\r\n    let obj = {}\r\n    \r\n    const onChange = e => {\r\n        obj.key = e.target.value\r\n        console.log(obj)\r\n    }\r\n\r\n    let input\r\n\r\n    if (props.multipleOptions) {\r\n        input = <input className=\"dropdown\" type=\"email\" list=\"languages\" onChange={onChange} multiple />\r\n    }\r\n\r\n    else {\r\n        input = <input className=\"dropdown\" type=\"text\" list=\"languages\" onChange={onChange} />\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            {input}\r\n            <datalist className=\"datalist\" id=\"languages\">\r\n                <div className=\"datalist__items\">\r\n                    <option className=\"datalist__items-item\" value=\"HTML\"></option>\r\n                    <option className=\"datalist__items-item\" value=\"CSS\"></option>\r\n                    <option className=\"datalist__items-item\" value=\"JavaScript\"></option>\r\n                    <option className=\"datalist__items-item\" value=\"Java\"></option>\r\n                    <option className=\"datalist__items-item\" value=\"Ruby\"></option>\r\n                    <option className=\"datalist__items-item\" value=\"PHP\"></option>\r\n                    <option className=\"datalist__items-item\" value=\"Go\"></option>\r\n                    <option className=\"datalist__items-item\" value=\"Erlang\"></option>\r\n                    <option className=\"datalist__items-item\" value=\"Python\"></option>\r\n                    <option className=\"datalist__items-item\" value=\"C\"></option>\r\n                    <option className=\"datalist__items-item\" value=\"C#\"></option>\r\n                    <option className=\"datalist__items-item\" value=\"C++\"></option>\r\n                </div>\r\n            </datalist>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Select","import React, { useState } from 'react'\r\nimport './App.css'\r\nimport Select from './components/Select'\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\"\r\n\r\nconst App = () => {\r\n\r\n  const [multipleOptions, setMultipleOptions] = useState(false)\r\n\r\n  const setOnlyOption = () => {\r\n    setMultipleOptions(false)\r\n  }\r\n\r\n  const setMultipleOption = () => {\r\n    setMultipleOptions(true)\r\n  }\r\n\r\n  return (\r\n    <Router>\r\n      <div>\r\n        <nav>\r\n          <ul>\r\n            <li>\r\n              <Link onClick={setOnlyOption} className=\"link\" to=\"/one\">Select One Option</Link>\r\n            </li>\r\n            <li>\r\n              <Link onClick={setMultipleOption} className=\"link\" to=\"/multiple\">Select Multiple Options</Link>\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n        <Switch>\r\n          <Route path=\"/one\">\r\n            <Select multipleOptions={multipleOptions} />\r\n          </Route>\r\n          <Route path=\"/multiple\">\r\n            <Select multipleOptions={multipleOptions} />\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}